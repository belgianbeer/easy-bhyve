#!/bin/sh
#
#  $Id: _bhyve,v 1.112 2021/01/22 01:31:52 minmin Exp $
#
#  BHyVe での Grubを使うOSのインストール/起動スクリプト
#  プログラム名
#   システム名-install		bhyveへのインストール
#   システム名-boot		インストール済みシステムの起動
#   システム名-ttyboot		consoleをttyで起動 (*-boot -t でも同じ)
#   システム名-console		null-modem経由でコンソールへ接続
#   システム名-resources	リソースの表示
#   システム名-shutodnw		VMMのシャットダウン
#   システム名-clean		VMMのクリア
#   システム名-snapshot	word	zvolへのsnapshot
#   システム名-rollback		最後のsnapshotへのrollback
#

export PATH=/usr/local/bin:/usr/local/sbin:/bin:/usr/bin:/sbin:/usr/sbin

do_sudo=sudo		# sudo コマンド
do_daemon=daemon	# daemon コマンド

# doasがインストールしてあればsudoではなくdoasを使う
if type doas >/dev/null 2>&1; then
	do_sudo=doas	# replace from sudo to doas
fi

zvol_opt='-o compression=off -o volmode=dev -o volblocksize=4k'	# ZFS Volumeのプロパティ
zvol_opt='-o volmode=dev -o volblocksize=4k'	# ZFS Volumeのプロパティ

progname=_bhyve		# このスクリプトのファイル名

# コマンド一覧
commands=' boot ttyboot clean console install resources shutdown '
commands_zfs=' clone history snapshot rollback '

#  デフォルトリソース
cpu=$(($(sysctl -n hw.ncpu) / 2)) # VMのデフォルトのCPU数(コア数の半分)
[ ${cpu} -eq 0 ] && cpu=1
mem=512M		# VMのデフォルトのメモリサイズ

snapshot_item='name,volsize,used,refer'	# *-snapshotの表示項目

# ------------------------------------------------------------

#  VMのリソース割り当て
#
#   新たなVMを増やす場合
#     case文のエントリーを増やす
#     _id に新規の番号を割り当てる
#     適当なISOイメージを割り当てる
#
#  con: consoleが接続されるヌルモデムのデバイス名 ex. /dev/nmdm0A
#  if0:  tap IFの名前   ex tap0
#        tapX と /dev/nmdmXA の Xの番号は一致し、_id に設定した値を使う
#  zvol: VM用 zfs volume
#	 システム名とZFSのvolume名は同じ名前であることを前提としている
#  hd0:  システムディスク 通常 /dev/zvol/${volroot}/${system}
#  cd0:  インストール用のISOイメージ
#  freebsd:  ターゲットOSがfreebsdならばYES
#  grub_inst_cmd: (optional) grub-bhyveでinstallに必要なコマンド列
#  grub_boot_cmd: (optional) grub-bhyveでbootに必要なコマンド列
#  hdopt: 追加のHDD
#  ifopt: 追加のNetwork IF
#
__config_system () {
	local _id _mem _cpu _if0 _hd0 _cd0 _zvol _hdopt _netopt _root

	eval _id=\$${system}_id
	if [ -z "${_id}" ]
	then
		echo "*** ${system} is bad name" 1>&2
		exit 1
	fi

	eval _mem=\$${system}_mem
	eval _cpu=\$${system}_cpu
	eval _cd0=\$${system}_cd0
	eval _zvol=\$${system}_zvol
	eval _if0=\$${system}_if0
	eval _hd0=\$${system}_hd0
	eval _root=\$${system}_gpt

	mem=${_mem:-${mem}}
	cpu=${_cpu:-${cpu}}
	root=${_root:-msdos1}

	con=/dev/nmdm${_id}A
	if0=${_if0:-tap${_id}}

	if [ ${zfs} = YES ]; then
		zvol=${_zvol:-${volroot}/${system}}
		hd0=${_hd0:-/dev/zvol/${zvol}}
	else
		hd0=${_hd0:-${volroot}/${system}}
	fi

	cd0=${_cd0}

	[ -z "${_if0}" ] && eval ${system}_if0=${if0}
	[ -z "${_hd0}" ] && eval ${system}_hd0=${hd0}

	eval freebsd=\$${system}_freebsd
	eval grub_inst_cmd=\$${system}_grub_inst
	eval grub_boot_cmd=\$${system}_grub_boot

	_id=0
	eval _netopt=\$${system}_if${_id}
	while [ -n "${_netopt}" ]
	do
		ifopt="${ifopt} -s 2:${_id},virtio-net,${_netopt}"

		eval if${_id}=${_netopt}
		eval _bridge=\$${system}_if${_id}_bridge
		eval if${_id}_bridge=${_bridge:-${bridge}}

		_id=$((_id + 1))
		eval _netopt=\$${system}_if${_id}
	done

	_id=0
	eval _hdopt=\$${system}_hd${_id}
	while [ -n "${_hdopt}" ]
	do
		eval hd${_id}=${_hdopt}
		hdopt="${hdopt} -s 3:${_id},virtio-blk,${_hdopt}"
		_id=$((_id + 1))
		eval _hdopt=\$${system}_hd${_id}
	done

}

__make_command_links () {
	local _systems _sys _cmd

	# _systems=$(sed -n '/^\([a-zA-Z0-9][a-zA-Z0-9]*\)_id=[0-9][0-9]*/s//\1/p' ${configs})
	_systems=$(sed -n '/^[[:space:]]*\([[:alpha:]][[:alpha:][:digit:]]*\)_id=[[:digit:]][[:digit:]]*/s//\1/p' ${configs})

	if [ x"${_systems}" = x ]
	then
		echo 'No bhyve configuration' 1>&2
		exit 2
	fi

	[ ${zfs} = YES ] && commands="$commands $commands_zfs"

	mkdir -p ${prog_dir}/bhyve || exit

	cd ${prog_dir}/bhyve || exit
	find . -type l -delete
	[ -f ../${progname}.conf ] && ln -sf ../${progname}.conf
	[ -f ../${progname}-${host}.conf ] && ln -sf ../${progname}-${host}.conf
	for _sys in ${_systems}
	do
		for _cmd in $commands
		do
			ln -sf ../${prog} ${_sys}-${_cmd} || exit
		done
	done

	exit
}

__check_and_load_module () {
	kldstat -q -m ${1} || ${do_sudo} kldload ${1}
}

__create_netif () {
	if ! ifconfig ${1} >/dev/null 2>&1
	then
		${do_sudo} ifconfig ${1} create
	fi
}

__check_and_set_bridge () {
	__create_netif ${1}
	__create_netif ${2}
	if ! ifconfig ${1} 2>/dev/null | grep -q '\<'${2}'\>'
	then
		${do_sudo} ifconfig ${1} addm ${2} up || exit
	fi
}

__init_systems () {
	local _id _if _bridge

	__check_and_load_module vmm
	__check_and_load_module nmdm
	__check_and_load_module if_tap
	__check_and_load_module if_bridge

	if kldstat -q -m if_tap && [ `sysctl -n net.link.tap.up_on_open` -eq 0 ]; then
		${do_sudo} sysctl -w net.link.tap.up_on_open=1
	fi

	__check_and_set_bridge ${bridge} ${netif}

	_id=0
	eval _if=\${if${_id}}
	while [ -n "${_if}" ]
	do
		eval __check_and_set_bridge \${if${_id}_bridge} ${_if}
		_id=$((_id + 1))
		eval _if=\${if${_id}}
	done
}

__check_running () {
	pgrep -qxf "bhyve: ${system}"
	return $?
}

#  ディスクイメージの作成 (HOGE-ressouces 時)
__make_disk () {
	if [ -e "${hd0}" ]; then
		echo "*** ${hd0} already exist" 1>&2
	elif [ ${zfs} = YES ]; then
		${do_sudo} zfs create -V ${V_size} ${sparse} ${zvol_opt} ${zvol} || exit
		zfs list -o ${snapshot_item} ${zvol}
		echo
	else
		${do_sudo} truncate -s ${V_size} ${hd0}
		ls -sl ${hd0}
		echo
	fi
}

# ディスクイメージがあるかどうかの確認
__check_resouces() {
	local _badconfig _id _hd

	_id=0
	eval _hd=\${hd${_id}}
	while [ -n "${_hd}" ]
	do
		if [ ! -e "${_hd}" ]; then
			echo "*** ${_hd} not found." 1>&2
			_badconfig=YES
		fi
		_id=$((_id + 1))
		eval _hd=\${hd${_id}}
	done

	if [ x"${install}" = xYES -a ! -e "${cd0}" ]; then
		echo "*** ${cd0} not found." 1>&2
		_badconfig=YES
	fi

	if [ x"${_badconfig}" = x"YES" ]; then
		exit 1		# 問題があれば終了
	fi
}

__connect_console() {	# nmdmデバイス経由でコンソールへ接続する
	local nmdm

	nmdm=`echo ${con} | tr 'A' 'B'`
	exec ${do_sudo} cu -l ${nmdm}
}

__print_resources () {
	local _id _opt _bridge

	if [ "x${V_size}" != x ]; then
		__make_disk
	fi

	echo host=${host}
	echo system=${system}
	echo con=${con}
	echo cpu=${cpu}
	echo mem=${mem}
	echo zvol=${zvol}
	echo cd0=${cd0}

	echo host_netif=${netif}
	echo host_bridge=${bridge}

	_id=0
	eval _if=\${if${_id}}
	while [ -n "${_if}" ]
	do
		eval echo if${_id}=${_if} if${_id}_bridge=\${if${_id}_bridge}
		_id=$((_id + 1))
		eval _if=\${if${_id}}
	done

	_id=0
	eval _opt=\$hd${_id}
	while [ -n "${_opt}" ]
	do
		echo hd${_id}=${_opt}
		_id=$((_id + 1))
		eval _opt=\$hd${_id}
	done

	[ -n "${ifopt}" ] && echo ifopt='"'$ifopt'"'
	[ -n "${hdopt}" ] && echo hdopt='"'$hdopt'"'
	[ -n "${cdopt}" ] && echo cdopt='"'$cdopt'"'
	[ -n "${grub_inst_cmd}" ] && echo grub_inst_cmd='"'$grub_inst_cmd'"'
	[ -n "${grub_boot_cmd}" ] && echo grub_boot_cmd='"'$grub_boot_cmd'"'
}

__destroy_tapif () {
	if ifconfig ${2} >/dev/null 2>&1
	then
		${do_sudo} ifconfig ${1} deletem ${2}
		${do_sudo} ifconfig ${2} destroy
	fi
}

__clean_vm () {
	local _id _optif _bridge

	if [ ${do_sudo} != echo ] && pgrep -qxf "bhyve: ${system}"
	then
		echo "*** ${system}: running" 1>&2
		exit 2
	fi

	if [ -e /dev/vmm/${system} ] ;
	then
		${do_sudo} bhyvectl --destroy --vm=${system} # VMのクリア
	fi

	_id=0
	eval _optif=\${if${_id}}
	while [ -n "${_optif}" ]
	do
		eval __destroy_tapif \${if${_id}_bridge} ${_optif}
		_id=$((_id + 1))
		eval _optif=\${if${_id}}
	done
}

__shutdown_vm () {
	local _pid _i

	if ! _pid=$(pgrep -xf "bhyve: ${system}")
	then
		echo "*** ${system} is not running" 1>&2
		exit 2
	fi

	if [ x${f_flag} = xYES ] ; then
		${do_sudo} kill -HUP ${_pid}
	else
		${do_sudo} kill ${_pid}
	fi

	test ${q_flag} || echo -n "Waiting for shutdown ${system} " 1>&2

	if [ ${do_sudo} != echo ]; then
		_i=0
		while pgrep -qxf "bhyve: ${system}"
		do
			_i=$((_i + 1))
			if [ ${_i} -ge 120 ]	# shutdownを1分までは待つ
			then
				echo "**** ${system}: can not shutdown!" 1>&2
				exit 2
			fi
			sleep 1
			test ${q_flag} || echo -n '.' 1>&2
		done
	fi
	__clean_vm
	test ${q_flag} || echo " Done." 1>&2
}

__rollback_volume () {
	local _rb

	if [ -z "${zvol}" ]; then
		echo "*** ${system}: No ZFS volume" 1>&2
		return 2
	fi
	if [ $# = 1 ]; then
		_rb=${zvol}@${1}
		if list -H -o name ${_rb} >/dev/null 2>&1 ; then
			echo "*** ${system}: ${_rb}: No such snapshot" 1>&2
			return 2
		fi
	else
		_rb=$(zfs list -d 1 -H -o name -t snapshot ${zvol} | tail -1)
		if [ -z "${_rb}" ]; then
			echo "*** ${system}: ${zvol} has no snapshot" 1>&2
			return 2
		fi
	fi
	${do_sudo} zfs rollback -r ${_rb}
}

__snapshot_volume () {
	local _keywords

	if [ -z "${zvol}" ]; then
		echo "*** ${system}: No zfs volume" 1>&2
		return 2
	fi

	if [ $# -eq 0 ]; then
		zfs list -d 1 -o ${snapshot_item} -t all ${zvol}
		return
	fi

	if pgrep -qxf "bhyve: ${system}"
	then
		echo "*** ${system}: running" 1>&2
		return 2
	fi

	_keywords=$(echo $* | tr ' ' _)
	${do_sudo} zfs snapshot $zvol@_`date +%Y%m%d%H%M`-${_keywords}
	zfs list -d 1 -o ${snapshot_item} -t all ${zvol}
}

__history_volume () {
	local _snap _count=0
	local _vol=${volroot}/${1}

	if [ -z "${1}" ]; then
		echo "*** ${system}: No zfs volume" 1>&2
		return 2
	fi

	zfs list -H -o name -r -t snapshot "${_vol}" | while read _snap; do
		case ${_snap} in
		*@_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]-*_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])
			eval $(echo ${_snap} | sed 's/^.*@_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]-\(.*\)\(_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\)$/local _sys=\1 _time=\2/p')
			__history_volume ${_sys} ${_time}
			;;
		esac
		[ ${_count} -eq 0 ] && echo ${_vol}
		echo ${_snap}
		if [ -n ${2} ]; then
			if echo ${_snap} | fgrep -q ${1}@${2}- ; then
				break
			fi
		fi
		_count=$((_count + 1))
	done
}

__clone_volume () {
	local _now=$(date +%Y%m%d%H%M)
	local _vm _bsnap _btime

	if [ -z "${zvol}" ]; then
		echo "*** ${system}: No zfs volume" 1>&2
		return 2
	fi

	case $# in

	0)	echo "Usage: ${progname} [snapshot] New_VM [New_VM]" 1>&2
		return 2 ;;

	1)	if pgrep -qxf "bhyve: ${system}"; then
			echo "*** ${system}: running" 1>&2
			return 2
		fi
		if zfs list -H -o name ${volroot}/${1} >/dev/null 2>&1; then
			echo "*** ${1}: already exist!" 1>&2
			return 2
		fi
		_bsnap=_${_now}-clone_base
		${do_sudo} zfs snapshot ${zvol}@${_bsnap} || exit
		_btime=_${_now}
		;;

	*)	case $1 in	

		_[1-9]*) _bsnap="$1"; shift
			_btime=${_bsnap%%-*}
			if ! zfs list "${zvol}@${_bsnap}" > /dev/null 2>&1; then
				echo "*** ${zvol}@${_bsnap}: No such snapshot" 1>&2
				return 2
			fi
			;;

		*)	if pgrep -qxf "bhyve: ${system}"; then
				echo "*** ${system}: running" 1>&2
				return 2
			fi
			if zfs list -H -o name ${volroot}/${1} >/dev/null 2>&1; then
				echo "*** ${1}: already exist!" 1>&2
				return 2
			fi
			_bsnap=_${_now}-clone_base
			${do_sudo} zfs snapshot ${zvol}@${_bsnap} || exit
			_btime=_${_now}
			;;
		esac
	esac

	for _vm in "$@"; do
		${do_sudo} zfs clone ${zvol}@${_bsnap} ${volroot}/${_vm}
		${do_sudo} zfs snapshot ${volroot}/${_vm}@_${_now}-${system}${_btime}
		${do_sudo} zfs list -d 1 -o ${snapshot_item} -t all ${volroot}/${_vm}
	done
}

__do_bhyve () {
	${do_exec} ${do_sudo} ${do_daemon} bhyve -u -A -H -P \
		-c ${cpu} \
		-m ${mem} \
		-l com1,${con} \
		-s 0:0,hostbridge \
		-s 1:0,lpc \
		${ifopt} \
		${hdopt} \
		${cdopt} \
		${system}
}

__grub_install () {
	local _st

	# install用のmapファイルの作成
	cat <<- EOT > ${map}
	(hd0) ${hd0}
	(cd0) ${cd0}
	EOT

	# install用のGrubの起動
	if [ x"${grub_inst_cmd}" = x ]; then
		${do_sudo} grub-bhyve -m ${map} -r cd0 -M ${mem} ${system}
	else
		${do_sudo} grub-bhyve -m ${map} -r cd0 -M ${mem} ${system} <<- EOT
		${grub_inst_cmd}
		boot
		EOT
	fi
	_st=$?
	rm -f ${map}

	# インストーラの起動
	[ ${_st} -eq 0 ] && __do_bhyve
	return ${_st}
}

__grub_boot () {
	local _st

	# boot用のmapファイルの作成
	cat <<- EOT > ${map}
	(hd0) ${hd0}
	EOT

	# Boot用の Grubの起動
	#
	if [ x"${grub_boot_cmd}" = x -o x"${p_flag}" = xYES ]; then
		${do_sudo} grub-bhyve -m ${map} -r hd0,${root} -M ${mem} ${system}
	else
		${do_sudo} grub-bhyve -m ${map} -r hd0,${root} -M ${mem} ${system} <<- EOT
		${grub_boot_cmd}
		boot
		EOT
	fi
	_st=$?

	rm -f ${map}

	# bhyveの起動
	[ ${_st} -eq 0 ] && __do_bhyve
	return ${_st}
}

__freebsd_install () {
	${do_sudo} bhyveload -c stdio -m ${mem} -d ${cd0} ${system} &&
	__do_bhyve
}

__freebsd_boot () {
	${do_sudo} bhyveload -c stdio -m ${mem} -d ${hd0} ${system} &&
	__do_bhyve
}

# ----- Utility tools ------

__util_id () {
	grep '^[^#].*_id=[0-9]' ${configs} |
		sort -n -t = +1 | sed -e 's/\(.*\)_id=\(.*\)/\2	\1/'
}


__get_mem_and_cpu () {
	(
		eval $(~/bin/bhyve/$1-resources)
		echo $cpu $mem
	)
}

__show_bhyve_detail () {
	echo
	pgrep -fl bhyve: |
	while read pid dummy vm
	do
		printf '%-5d  %-12s  %d  %s\n' ${pid} ${vm} $(__get_mem_and_cpu ${vm})
	done | sort +1
}

__util_stat () {

	while getopts 'a' cmd_arg
	do
		case "${cmd_arg}" in
		a)      a_flag=YES ;;
		esac
	done >&2

	pgrep -d, bhyve >/dev/null 2>&1 && { ps -u -p $(pgrep -d, bhyve); echo; }

	[ -d /dev/vmm ] && ls -l /dev/vmm/*

	[ -n "${a_flag}" ] && __show_bhyve_detail
}

# ----- ここからメイン -----

prog=${0##*/}
prog_dir=${0%/*}
system=${prog%-*}	#  SYSTEM-command の SYSTEM
cmd=${prog##*-}		#                    command

hostname=$(hostname)
host=${hostname%%.*}	# host名から '.' 以降の除いた名前

#  configの読み込み
#
if [ -f ${prog_dir}/${progname}.conf ]; then
	. ${prog_dir}/${progname}.conf
	configs=${prog_dir}/${progname}.conf
fi

if [ -f ${prog_dir}/${progname}-${host}.conf ]; then
	. ${prog_dir}/${progname}-${host}.conf
	configs="${configs} ${prog_dir}/${progname}-${host}.conf"
fi

if [ -z "${configs}" ]; then
	echo "${prog}: No config: ${progname}-${host}.conf nor ${progname}.conf" >&2
	exit 1
fi

case ${prog} in

bhyve-id)	__util_id ; exit ;;
bhyve-stat)	__util_stat "$@"; exit ;;

esac

# check ZFS system
#
case ${volroot} in
/*) zfs=NO ;;
*)  zfs=YES ;;
esac

if [ ${prog} = ${progname} ]	# command 名がスクリプトの名前そのものだった場合
then
	__make_command_links	# コマンドのシンボリックリンクを作って終了
	exit
fi

__config_system

#  -d デバッグ用 (root権限が必要なコマンドを実行しない)
#  -t サーバーをバックグラウンドにしない
#  -c cpu数
#  -m メモリサイズ
#  -V size 指定サイズのvolumeの作成 (*-resources のみ)
#  -s sparseなボリュームの作成
#  -p Grub boot時にPause (オペレータが介在する場合)
#  -q shtudownの時に何も表示しない
#
while getopts 'dfqptsc:m:V:' cmd_arg; do
	case "${cmd_arg}" in
	d)	do_sudo=echo ;;
	f)	f_flag=YES ;;
	t)	con=stdio ; unset do_daemon ;;
	c)	cpu=${OPTARG} ;;
	m)	mem=${OPTARG} ;;
	p)	p_flag=YES ;;
	q)	q_flag=YES ;;
	s)	sparse='-s' ;;
	V)	V_size=${OPTARG} ;;
	*)	echo "Usage: ${0##*/} [ -t ]" 1>&2; exit 2;;
	esac
done
shift $((OPTIND - 1))

# コマンドの判断
#
case ${cmd} in
boot)		;;
ttyboot)	con=stdio
		unset do_daemon ;;
install)	con=stdio install=YES cdopt="-s 4:0,ahci-cd,${cd0}"
		unset do_daemon ;;

console)	__connect_console	; exit ;;
clean)		__clean_vm		; exit ;;
clone)		__clone_volume "$@"	; exit ;;
history)	__history_volume ${system} ; exit ;;
resources)	__print_resources	; exit ;;
rollback)	__rollback_volume "$@"	; exit ;;
shutdown)	__shutdown_vm		; exit ;;
snapshot)	__snapshot_volume "$@"	; exit ;;
*)		echo "*** ${cmd}: Unknown Commmand" 1>&2 ; exit 2 ;;
esac

__clean_vm
__check_resouces
__init_systems

cd /tmp		# ワーキングディレクトリを /tmp に変更

if [ x${freebsd} = xYES ]; then
	if [ x${install} = xYES ]; then
		__freebsd_install
	else
		__freebsd_boot
	fi
else
	map=`mktemp /tmp/_bhyve-map-${system}-XXXXXX` # grub-bhyve用mapファイル

	if [ x${install} = xYES ]; then
		__grub_install
	else
		__grub_boot
	fi
fi
